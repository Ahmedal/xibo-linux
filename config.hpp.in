#pragma once

#include <string>

#include "common/fs/FilePath.hpp"
#include "common/fs/FileSystem.hpp"

namespace ProjectResources
{
    inline std::string version()
    {
    #ifdef SNAP_ENABLED
        return getenv("SNAP_VERSION");
    #else
        return std::string{"dev-version"};
    #endif
    }

    inline std::string codeVersion()
    {
    #ifdef SNAP_ENABLED
        return getenv("SNAP_REVISION");
    #else
        return std::string{"dev-revision"};
    #endif
    }

    inline FilePath buildDirectory()
    {
    #ifdef SNAP_ENABLED
        return FilePath{getenv("SNAP")} / "bin";
    #else
        return FileSystem::currentPath();
    #endif
    }

    inline FilePath configDirectory()
    {
    #ifdef SNAP_ENABLED
        return FilePath{getenv("SNAP_USER_COMMON")};
    #else
        return FileSystem::currentPath();
    #endif
    }

#ifdef SNAP_ENABLED
    inline FilePath oldConfigDirectory()
    {
        return FilePath{getenv("SNAP_USER_DATA")};
    }
#endif

    inline FilePath publicKeyFile()
    {
        return configDirectory() / "id_rsa.pub";
    }

    inline FilePath privateKeyFile()
    {
        return configDirectory() / "id_rsa";
    }

    inline FilePath defaultResourcesDir()
    {
        return configDirectory() / "resources";
    }

    inline FilePath splashScreen()
    {
        return buildDirectory() / "splash.jpg";
    }

    inline FilePath uiFile()
    {
        return buildDirectory() / "ui.glade";
    }

    inline FilePath cmsSettingsFile()
    {
        return configDirectory() / "cmsSettings.xml";
    }

    inline FilePath playerSettingsFile()
    {
        return configDirectory() / "playerSettings.xml";
    }

    inline FilePath scheduleFile()
    {
        return configDirectory() / "schedule.xml";
    }

    inline FilePath cacheFile()
    {
        return configDirectory() / "cachedFiles.xml";
    }

    inline std::string playerBinary()
    {
        auto path = buildDirectory() / "player";
    #ifdef SNAP_ENABLED
        return "desktop-launch " + path.string();
    #else
        return path.string();
    #endif
    }

    inline std::string optionsBinary()
    {
        auto path = buildDirectory() / "options";
    #ifdef SNAP_ENABLED
        return "desktop-launch " + path.string();
    #else
        return path.string();
    #endif
    }

}
