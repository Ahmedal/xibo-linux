#pragma once

#include <string>

#include "common/FilePath.hpp"
#include "common/FileSystem.hpp"

const std::string DEFAULT_RESOURCES_DIR = "resources";
const std::string DEFAULT_CACHE_FILE = "cachedFiles.xml";

namespace ProjectResources
{
    inline FilePath buildDirectory()
    {
        const char* directory = getenv("SNAP");
        return directory == nullptr ? FilePath{"@CMAKE_RUNTIME_OUTPUT_DIRECTORY@"} : FilePath{directory} / "bin";
    }

    inline FilePath configDirectory()
    {
        const char* directory = getenv("SNAP_USER_DATA");
        return directory == nullptr ? FileSystem::currentPath() : FilePath{directory};
    }

    inline FilePath publicKeyFile()
    {
        return configDirectory() / "id_rsa.pub";
    }

    inline FilePath privateKeyFile()
    {
        return configDirectory() / "id_rsa";
    }

    inline FilePath defaultResourcesDir()
    {
        return configDirectory() / "resources";
    }

    inline FilePath cmsSettings()
    {
        return configDirectory() / "cmsSettings.xml";
    }

    inline FilePath playerSettings()
    {
        return configDirectory() / "playerSettings.xml";
    }

    inline std::string playerBinary()
    {
        const char* directory = getenv("SNAP");
        auto path = buildDirectory() / "player";
        return directory == nullptr ? path.string() : "desktop-launch " + path.string();
    }

    inline std::string optionsBinary()
    {
        const char* directory = getenv("SNAP");
        auto path = buildDirectory() / "options";
        return directory == nullptr ? path.string() : "desktop-launch " + path.string();
    }

}
