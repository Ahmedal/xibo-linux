#pragma once

#include <string>

#include "common/fs/FilePath.hpp"
#include "common/fs/FileSystem.hpp"

const std::string DefaultCacheFile = "cachedFiles.xml";
const std::string DefaultScheduleFile = "schedule.xml";

namespace ProjectResources
{
    inline std::string version()
    {
        const char* version = getenv("SNAP_VERSION");
        return version == nullptr ? "null" : version;
    }

    inline std::string codeVersion()
    {
        const char* revision = getenv("SNAP_REVISION");
        return revision == nullptr ? "null" : revision;
    }

    inline FilePath buildDirectory()
    {
        const char* directory = getenv("SNAP");
        return directory == nullptr ? FilePath{"@CMAKE_RUNTIME_OUTPUT_DIRECTORY@"} : FilePath{directory} / "bin";
    }

    inline FilePath configDirectory()
    {
        const char* directory = getenv("SNAP_USER_DATA");
        return directory == nullptr ? FileSystem::currentPath() : FilePath{directory};
    }

    inline FilePath publicKeyFile()
    {
        return configDirectory() / "id_rsa.pub";
    }

    inline FilePath privateKeyFile()
    {
        return configDirectory() / "id_rsa";
    }

    inline FilePath defaultResourcesDir()
    {
        return configDirectory() / "resources";
    }

    inline FilePath splashScreen()
    {
        return buildDirectory() / "splash.jpg";
    }

    inline FilePath cmsSettingsFile()
    {
        return configDirectory() / "cmsSettings.xml";
    }

    inline FilePath playerSettingsFile()
    {
        return configDirectory() / "playerSettings.xml";
    }

    inline std::string playerBinary()
    {
        const char* directory = getenv("SNAP");
        auto path = buildDirectory() / "player";
        return directory == nullptr ? path.string() : "desktop-launch " + path.string();
    }

    inline std::string optionsBinary()
    {
        const char* directory = getenv("SNAP");
        auto path = buildDirectory() / "options";
        return directory == nullptr ? path.string() : "desktop-launch " + path.string();
    }

}
